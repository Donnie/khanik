name: Build Khanik

on:
  workflow_dispatch:
  push:
    branches:
      - "main"
    paths:
      - "**"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: ^1.23.1
      - name: "Get Previous tag"
        id: previoustag
        uses: "oprypin/find-latest-tag@v1"
        with:
          repository: Donnie/khanik
          releases-only: true
      - name: "Get next minor version"
        id: semvers
        uses: "WyriHaximus/github-action-next-semvers@v1"
        with:
          version: ${{ steps.previoustag.outputs.tag }}
      - name: Build
        run: |
          GODEBUG=netdns=go CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -ldflags '-extldflags "-static" -X main.Version=${{ steps.semvers.outputs.patch }}' -o khanik-linux-amd64
          GODEBUG=netdns=go CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -ldflags '-extldflags "-static" -X main.Version=${{ steps.semvers.outputs.patch }}' -o khanik-linux-arm64
          GODEBUG=netdns=go CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -ldflags '-extldflags "-static" -X main.Version=${{ steps.semvers.outputs.patch }}' -o khanik-macos-arm64
          echo APP_VERSION=$(./khanik-linux-amd64 version) >> $GITHUB_ENV
      - name: Print version
        run: |
          echo ${{ env.APP_VERSION }}
      - name: Create release
        id: create-release
        uses: softprops/action-gh-release@v2.0.8
        with:
          draft: false
          fail_on_unmatched_files: true
          files: |
            khanik-linux-amd64
            khanik-linux-arm64
            khanik-macos-arm64
          generate_release_notes: true
          prerelease: false
          tag_name: khanik-${{ env.APP_VERSION }}
